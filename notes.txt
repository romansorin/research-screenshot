To create a site object:
fields(name, host)

Given a parsed response in the form of fields(url):
  - Split up the URL by it's root and subdomain, as well as TLD
  - Use the root domain for base name, and use subdomain with replaced period delimiter as hyphen (ex. status.romansorin.com becomes name=status-romansorin)
  - Figure out an efficient way to sort and search the root domains
  - If root domain is equal to another root domain, flag it; eventually compare the screenshot of two sites; if they are below some threshold of similarity (such as 10) then only use the response that is ranked higher
  - set url = host


  Comparison is only necessary when a key in the delimited list has a count of two or more
Screenshot

- Go to failed and exceeded jobs; take manual shots if necessary

Then run RGB->greyscale conversion
Then run image similarity algorithm
^^ Processing checks
For screenshots:
: foreach sites as site :
  - Navigate to site.host
  - Take screenshot (fullpage)
  - Convert to greyscale rgb
  - Make any comparisons as necessary

# Next step: Parse unique domains log, foreach domain copy greyscale image (do a join) to cluster_data folder
# Also import clustering

    Unique identification process:
    1. Run preliminary check; if the length of the values attached to the key is equal to one, then add that to unique domains, and move on to next element
    2. If the length of the values is greater than 1, run image similarity check
        - Start at element of index 0 in the values. Compare that to element index + 1, and continue doing that.
          If their similarity threshold is less than 10-15, keep the element with the higher ranking (site_id). Remove other element from array.
          Move to next elements.
          Continue through the elements until either there are no more similarities through image algo or until one element remains.
General URL format:
<domain_name>.<tld>


Domain edge cases:
Case one: <domain_name>.<tld> - count = 1
Case two: <subdomain_name>.<domain_name>.<tld> - count = 2
Case three: <subdomain_name>.<domain_name>.<tld>.<geo> - count = 3
Case four: <domain_name>.<tld>.<geo> - count = 2

If count is only one, then the domain can be stored under that key in some array using array element 0.
If count is two, check for presence of TLD; if TLD is of last array element, then subdomain exists; else sort by domain name
If count is three, subdomain-domain

DONE - 1. Query AWS API
 - Add response to database
 - Update start variable (found in plaintext txt)

DONE - 2. SELECT response FROM responses
 - Clean up each result: structure: Ats->Results->Result->Alexa->TopSites->Country->Sites->Site[Object]
 - Mark that query as parsed
 - Create a Site object from that

DONE - 3. Take screenshot of DataUrl from that query
 - Create Screenshot object linked to that site
 - Run RGB Screenshot object into greyscale conversion
https://github.com/rohanbaisantry/image-clustering
https://github.com/asselinpaul/ImageSeg-KMeans
https://github.com/abhijeet3922/Image-compression-with-Kmeans-clustering
https://shirinsplayground.netlify.com/2018/10/keras_fruits_cluster/
https://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html
https://keras.io/applications/
https://stackoverflow.com/questions/39123421/image-clustering-by-its-similarity-in-python
https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_ml/py_kmeans/py_kmeans_opencv/py_kmeans_opencv.html
https://github.com/eriklindernoren/ML-From-Scratch
https://github.com/zegami/image-similarity-clustering
https://github.com/Wrinth/Image-Compression-with-K-Means-Clustering
https://github.com/elcorto/imagecluster
https://github.com/beleidy/unsupervised-image-clustering

- extract name of site from exploded url

for cases where domain names are the same:
- keep subdomains even if root domain is same
- two options for handling duplicates root domains, but different tlds:
    1. keep organizational tld, filter/pop geographical tlds
    2. run another hidden layer / image processing step for image similarity; if 95%+ similar


# TODO: Add method documentation


